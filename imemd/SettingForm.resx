<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEVFyK5FRciuQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAFBkjZRUYI/8VGCP/FBkjZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABcXIxYWGCTtFRgjyxUYI8sWGCTtFxcjFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAFhckpBUYI/wUGSMzFhYhLxUYI/sUFyKjAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABQYJEAVGCP+FhcijgAAAAAAAAAAFRckjxUYI/8WFiFFAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkJCQHFRgj2BUYI+IUFCcNAAAAAAAAAAAXFy4LFRgj3xUY
        I9scHBwJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGCN2FhcjmRYX
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABUYIpUVGCP/FRgj/xUYIpUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAdwAAAP8AAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRgilRUYI/8VGCP/FRgilQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABjAAAA/wAAADEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVGCKVFRgj/xUYI/8VGCKVAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAABmAAAAGwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUYIpUVGCP/FRgj/xUY
        IpUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRgilRUY
        I/8VGCP/FRgjxxUYIncVGCJ3FRgidxUYIncVGCJ3FRgidxUYIncVGCJ3FRgidxUYIncVGCJ3FRgidxUY
        IncVGCJ3FRgidxUYIncVGCJ3FRgidxUYIncVGCJ3FRgidxUYIncVGCJ3FRgidxUYIncVGCJ3FRgidxUY
        IncVGCPHFRgj/xUYI9wVGCP/FRgj/xUYI/8VGCP/FRgj/xUYI/8VGCP/FRgj/xUYI/8VGCP/FRgj/xUY
        I/8VGCP/FRgj/xUYI/8VGCP/FRgj/xUYI/8VGCP/FRgj/xUYI/8VGCP/FRgj/xUYI/8VGCP/FRgj/xUY
        I/8VGCP/FRgj/xUYI/8VGCPc//w////8P///+B////gf///xj///4Yf/AAPAAAAH4AA////8P////D//
        h/w/gYH8PwDg/D4weHw+MHx8PjA8fD8wPnw/ERx8PwEcfD+BgPw/wAD8P/AD/D/yH/w/8//8PwAD/D8A
        A/w/8f/8P/H//D/x//w////8AAAAAAAAAAA=
</value>
  </data>
</root>